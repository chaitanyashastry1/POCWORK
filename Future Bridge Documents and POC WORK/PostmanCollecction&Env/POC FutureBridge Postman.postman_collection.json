{
	"info": {
		"_postman_id": "d8cf4499-3d0f-494d-97de-682ac6a2de6a",
		"name": "POC FutureBridge Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Employee Create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"if(jsonData.status === \"success\"){\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"// check EMP id\r",
							" pm.test(\" Employee ID=========> \" + jsonData.data.id);\r",
							" pm.environment.set(\"ID\", jsonData.data.id);\r",
							"\r",
							"});} else {\r",
							"   pm.test('code: 429,API is having too many requests')\r",
							"    // Insert logic here for other tests\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"chani1\",\r\n    \"salary\": \"122\",\r\n    \"age\": \"30\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}create",
					"host": [
						"{{API_URL}}create"
					]
				}
			},
			"response": []
		},
		{
			"name": "get All Employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"// Check Status code\r",
							"pm.test(\"Status code is 200 of All Employees API\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// check total count Employees\r",
							" pm.test(\"total Employees by API=========> \" + jsonData.data.length)\r",
							"// check total Employee Details name\r",
							"        for (i = 0; i < jsonData.data.length; i++) {\r",
							"            var id = JSON.stringify(jsonData.data[i].id);\r",
							"            var employee_name = JSON.stringify(jsonData.data[i].employee_name);\r",
							"            var employee_age = JSON.stringify(jsonData.data[i].employee_age);\r",
							"                pm.test(\"Employee Id  found====> \" + id + \"  Containing Name is===> \" + employee_name + \" & Age is \" + employee_age )\r",
							"                //pm.test(\"-------------------------------\");\r",
							"        }"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}employees",
					"host": [
						"{{API_URL}}employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Specific Employee",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"let y = [];\r",
							"\r",
							"//  Response time TESTS SECTION // \r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"const successNullDataSchema= {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"null\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"status\",\r",
							"    \"data\",\r",
							"    \"message\"\r",
							"  ]\r",
							"}\r",
							"const successSchema200 = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"status\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"data\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"id\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"employee_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"employee_salary\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"employee_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"profile_image\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"id\",\r",
							"        \"employee_name\",\r",
							"        \"employee_salary\",\r",
							"        \"employee_age\",\r",
							"        \"profile_image\"\r",
							"      ]\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"status\",\r",
							"    \"data\",\r",
							"    \"message\"\r",
							"  ]\r",
							"\r",
							"};\r",
							"if (jsonData.status === \"success\") {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"    pm.test('Json is valid', () => {\r",
							"        const schema = successNullDataSchema;\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"        var ignoreDigit = new RegExp(\"^[0-9]*$\");\r",
							"        var keys = extractJSON(jsonData, []);\r",
							"\r",
							"        function extractJSON(obj, keys) {\r",
							"            for (const i in obj) {\r",
							"                if (/^\"0-9\"/.test(i)) {\r",
							"                    continue\r",
							"                }\r",
							"                if (Array.isArray(obj[i]) || typeof obj[i] === 'object') {\r",
							"                    if (!ignoreDigit.test(i))\r",
							"                        y.push(i);\r",
							"                    //console.log(\"Outer\", i );\r",
							"                    //keysn = i;\r",
							"                    extractJSON(obj[i], keys + ' > ' + i + ' > ');\r",
							"                } else {\r",
							"                    if (!ignoreDigit.test(i))\r",
							"                        y.push(i);\r",
							"                    //console.log(\"Nested\", i );\r",
							"                }\r",
							"            }\r",
							"        }\r",
							"        var keysArr = y;\r",
							"        //console.log(keysArr);\r",
							"        pm.test(\"Keys of   API are \" + \" = \" + keysArr.sort());\r",
							"        pm.environment.set(\"ALL   KEYS\", keysArr.sort());\r",
							"       // pm.environment.set(\"employeeId\", jsonData.data.id);\r",
							"    });\r",
							"\r",
							"} else if (jsonData.status === 401) {\r",
							"    pm.test('code: 401,Unauthorized', () => {\r",
							"        const schema = successNullDataSchema;\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true; {\r",
							"            throw new Error(jsonData.error + \"==> \" + jsonData.message);\r",
							"        } //to treat as an error \r",
							"    });\r",
							"} else if (jsonData.message === \"Your Email and Password do not match. Please try again.\") {\r",
							"    pm.test('code: 400,Bad Request', () => {\r",
							"        const schema = ErrorSchema400;\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true; {\r",
							"            throw new Error(jsonData.message);\r",
							"        } //to treat as an error \r",
							"    });\r",
							"} else if (jsonData.message === \"Invalid Username or Password.\") {\r",
							"    pm.test('code: 400,Bad Request', () => {\r",
							"        const schema = ErrorSchema400_INV;\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true; {\r",
							"            throw new Error(jsonData.message);\r",
							"        } //to treat as an error \r",
							"    });\r",
							"} else if (jsonData.fieldError.password === \"must not be blank\") {\r",
							"    pm.test('code: 400,Bad Request', () => {\r",
							"        const schema = ErrorSchema400_P;\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true; {\r",
							"            throw new Error(\"password \" + jsonData.fieldError.password);\r",
							"        } //to treat as an error \r",
							"    });\r",
							"} else if (jsonData.fieldError.usernameOrEmail === \"must not be blank\") {\r",
							"    pm.test('code: 400,Bad Request', () => {\r",
							"        const schema = ErrorSchema400_UN_EML;\r",
							"        pm.expect(tv4.validate(jsonData, schema)).to.be.true; {\r",
							"            throw new Error(\"usernameOrEmail \" + jsonData.fieldError.usernameOrEmail);\r",
							"        } //to treat as an error \r",
							"    });\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_URL}}employee/{{ID}}",
					"host": [
						"{{API_URL}}employee"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Employee update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200 of update API\", function () {\r",
							"if(jsonData.status === \"success\"){\r",
							"    pm.test(\"Details Fetched\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"// check EMP id\r",
							" pm.test(\" Employee NAme=========> \" + jsonData.data.name + \"==>is updated Successfully\");\r",
							" pm.test(\" Employee salary=========> \" + jsonData.data.salary + \"==>is updated Successfully\");\r",
							" pm.test(\" Employee age=========> \" + jsonData.data.age + \"==>is updated Successfully\");\r",
							"});} else {\r",
							"   pm.test('code: 429,API is having too many requests')\r",
							"    // Insert logic here for other tests\r",
							"}});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"chani1\",\r\n    \"salary\": \"122111111111\",\r\n    \"age\": \"30\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}update/{{ID}}",
					"host": [
						"{{API_URL}}update"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Employee Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"if(jsonData.status === \"success\"){\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"// check EMP id\r",
							" pm.test(\" Employee ID=========> \" + jsonData.data + \"==>is deleted Successfully\");\r",
							" pm.environment.set(\"ID\", jsonData.data.id);\r",
							"\r",
							"});} else {\r",
							"   pm.test('code: 429,API is having too many requests')\r",
							"    // Insert logic here for other tests\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_URL}}delete/{{ID}}",
					"host": [
						"{{API_URL}}delete"
					],
					"path": [
						"{{ID}}"
					]
				}
			},
			"response": []
		}
	]
}